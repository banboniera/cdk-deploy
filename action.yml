name: "CDK Deploy Stack"
description: "Deploys a CDK stack using pre-synthesized templates"
branding:
  icon: "upload-cloud"
  color: "green"

inputs:
  aws-region:
    description: "Target AWS region for deployment"
    required: true
  role-to-assume:
    description: "AWS IAM role ARN to assume"
    required: true
  stack-name:
    description: "Name of the CDK stack to deploy"
    required: false
  artifact-name:
    description: "Name for the deployment artifact (default: cdk-deployment-package)"
    required: false
    default: "cdk-deployment-package"
  artifact-path:
    description: "Path to store deployment files (default: deployment)"
    required: false
    default: "deployment"
  node-version:
    description: "Node.js version (default: 22)"
    required: false
    default: "22"
  timeout-seconds:
    description: "Maximum duration (in seconds) for deployment (default: 1800)"
    required: false
    default: "1800"
  skip-validation:
    description: "Skip stack validation before deployment (default: true)"
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: Download Synthesized Template
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    - name: Move Artifact
      shell: bash
      run: mv ${{ inputs.artifact-path }}/* .

    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Validate Stack
      if: inputs.skip-validation != 'true'
      shell: bash
      run: |
        echo "::group::Stack Validation"

        if [ ! -d "cdk.out" ]; then
          echo "::error::cdk.out directory not found in ${{ inputs.artifact-path }}"
          exit 1
        fi

        if [ -n "${{ inputs.stack-name }}" ]; then
          if ! grep -q "\"${{ inputs.stack-name }}\"" cdk.out/manifest.json; then
            echo "::error::Stack ${{ inputs.stack-name }} not found in synthesized output"
            exit 1
          fi

          if ! npx cdk diff ${{ inputs.stack-name }} --app cdk.out; then
            echo "::warning::Stack validation detected changes - proceeding with deployment"
          else
            echo "Stack validation successful - no changes detected"
          fi
        else
          if ! npx cdk diff --app cdk.out; then
            echo "::warning::Stack validation detected changes - proceeding with deployment"
          else
            echo "Stack validation successful - no changes detected"
          fi
        fi
        echo "::endgroup::"

    - name: Deploy Stack
      id: deploy
      shell: bash
      run: |
        echo "status=pending" >> $GITHUB_OUTPUT

        if [ -n "${{ inputs.stack-name }}" ]; then
          DEPLOY_CMD="npx cdk deploy ${{ inputs.stack-name }}"
        else
          DEPLOY_CMD="npx cdk deploy --all"
        fi

        if timeout ${{ inputs.timeout-seconds }} $DEPLOY_CMD \
          --require-approval never \
          --app cdk.out \
          --outputs-file outputs.json; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully"
        else
          EXIT_CODE=$?
          echo "status=failure" >> $GITHUB_OUTPUT

          if [ $EXIT_CODE -eq 124 ]; then
            FAILURE_REASON="Deployment timed out after ${{ inputs.timeout-seconds }} seconds"
          else
            FAILURE_REASON="Deployment failed with exit code $EXIT_CODE"
          fi
          echo "failure-reason=$FAILURE_REASON" >> $GITHUB_OUTPUT
          echo "::error::$FAILURE_REASON"
          exit $EXIT_CODE
        fi

    - name: Process Deployment Results
      if: always()
      shell: bash
      run: |
        echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.deploy.outputs.status }}" == "success" ]; then
          echo "**Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          
          echo "### Outputs 📋" >> $GITHUB_STEP_SUMMARY
          echo "| Output Key | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------|" >> $GITHUB_STEP_SUMMARY
          node -e '
            const fs = require("fs");
            const outputs = JSON.parse(fs.readFileSync("outputs.json", "utf8"));
            Object.entries(outputs).forEach(([stackName, stackOutputs]) => {
              Object.entries(stackOutputs).forEach(([key, value]) => {
                console.log(`| ${stackName}.${key} | \`${value}\` |`);
              });
            });
          ' >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Reason**: ${{ steps.deploy.outputs.failure-reason }}" >> $GITHUB_STEP_SUMMARY
        fi
