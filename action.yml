name: "CDK Deploy"
description: "Deploys a CDK using pre-synthesized templates"
branding:
  icon: "upload-cloud"
  color: "green"

inputs:
  aws-region:
    description: "Target AWS region for deployment"
    required: true
  role-to-assume:
    description: "AWS IAM role ARN to assume"
    required: true
  stack-name:
    description: "Name of the CDK stack to deploy"
    required: false
  artifact-name:
    description: "Name for the deployment artifact (default: cdk-deployment-package)"
    required: false
    default: "cdk-deployment-package"
  node-version:
    description: "Node.js version (default: 22)"
    required: false
    default: "22"
  timeout-seconds:
    description: "Maximum duration (in seconds) for deployment (default: 1800)"
    required: false
    default: "1800"

runs:
  using: composite
  steps:
    - name: Download Synthesized Template
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}

    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install CDK
      shell: bash
      run: npm install -g aws-cdk

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Deploy Stack
      id: deploy
      shell: bash
      run: |
        echo "status=pending" >> $GITHUB_OUTPUT

        if [ -n "${{ inputs.stack-name }}" ]; then
          DEPLOY_CMD="cdk deploy ${{ inputs.stack-name }}"
        else
          DEPLOY_CMD="cdk deploy --all"
        fi

        if timeout ${{ inputs.timeout-seconds }} $DEPLOY_CMD \
          --app . \
          --no-synth \
          --require-approval never \
          --outputs-file outputs.json > >(tee /tmp/stdout.log) 2> >(tee /tmp/stderr.log >&2); then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully"
        else
          EXIT_CODE=$?
          echo "status=failure" >> $GITHUB_OUTPUT

          if [ $EXIT_CODE -eq 124 ]; then
            FAILURE_REASON="Deployment timed out after ${{ inputs.timeout-seconds }} seconds"
          else
            ERROR_OUTPUT=$(cat /tmp/stdout.log /tmp/stderr.log | tr '\n' ' ' | sed 's/"/\\"/g')
            FAILURE_REASON="Deployment failed with exit code $EXIT_CODE. Error output: $ERROR_OUTPUT"
          fi
          echo "failure-reason=$FAILURE_REASON" >> $GITHUB_OUTPUT
          echo "::error::$FAILURE_REASON"
          rm -f /tmp/stdout.log /tmp/stderr.log
          exit $EXIT_CODE
        fi

    - name: Process Deployment Results
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.deploy.outputs.status }}" == "success" ]; then
          echo "## **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          
          echo "### Outputs 📋" >> $GITHUB_STEP_SUMMARY
          echo "| Output Key | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------|" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ inputs.stack-name }}" ]; then
            jq -r 'to_entries[] | .value | to_entries[] | "| \(.key) | `\(.value)` |"' outputs.json >> $GITHUB_STEP_SUMMARY
          else
            jq -r 'to_entries[] | .key as $stack | .value | to_entries[] | "| \($stack).\(.key) | `\(.value)` |"' outputs.json >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## **Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Reason**: ${{ steps.deploy.outputs.failure-reason }}" >> $GITHUB_STEP_SUMMARY
        fi
