name: 'CDK Deploy Stack'
description: "Deploys a CDK stack using pre-synthesized templates"
branding:
  icon: 'upload-cloud'
  color: 'green'

inputs:
  stack-name:
    description: 'Name of the CDK stack to deploy'
    required: true
  aws-region:
    description: 'Target AWS region for deployment'
    required: true
  role-to-assume:
    description: 'AWS IAM role ARN to assume'
    required: true
  artifact-name:
    description: 'Name for the deployment artifact (default: cdk-deployment-package)'
    required: false
    default: 'cdk-deployment-package'
  artifact-path:
    description: 'Path to store deployment files (default: deployment)'
    required: false
    default: 'deployment'
  node-version:
    description: 'Node.js version (default: 22)'
    required: false
    default: '22'
  timeout-seconds:
    description: 'Maximum duration (in seconds) for deployment (default: 1800)'
    required: false
    default: '1800'
  skip-validation:
    description: 'Skip stack validation before deployment (default: false)'
    required: false
    default: 'false'
  execution-id:
    description: 'Unique identifier for concurrent deployments (default: run_id-run_number)'
    required: false
    default: ${{ github.run_id }}-${{ github.run_number }}

outputs:
  deployment-status:
    description: 'Result of the deployment (success/failure)'
    value: ${{ steps.deploy.outputs.status }}
  failure-reason:
    description: 'Error message if deployment failed'
    value: ${{ steps.deploy.outputs.failure-reason }}
  stack-outputs:
    description: 'JSON containing stack outputs after deployment'
    value: ${{ steps.process-outputs.outputs.stack-outputs }}

runs:
  using: composite
  steps:
    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: true

    - name: Download Synthesized Template
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    - name: Change Working Directory
      shell: bash
      run: cd ${{ inputs.artifact-path }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Validate Stack
      if: inputs.skip-validation != 'true'
      shell: bash
      run: |
        echo "::group::Stack Validation"
        
        # Check if cdk.out exists
        if [ ! -d "cdk.out" ]; then
          echo "::error::cdk.out directory not found in ${{ inputs.artifact-path }}"
          exit 1
        fi
        
        # Validate stack exists in synthesized output
        if ! grep -q "\"${{ inputs.stack-name }}\"" cdk.out/manifest.json; then
          echo "::error::Stack ${{ inputs.stack-name }} not found in synthesized output"
          exit 1
        fi
        
        # Run diff to check for changes
        if ! npx cdk diff ${{ inputs.stack-name }} --app cdk.out; then
          echo "::warning::Stack validation detected changes - proceeding with deployment"
        else
          echo "Stack validation successful - no changes detected"
        fi
        echo "::endgroup::"

    - name: Deploy Stack
      id: deploy
      shell: bash
      run: |
        # Initialize status tracking
        echo "status=pending" >> $GITHUB_OUTPUT
        
        # Create unique outputs file to prevent conflicts in parallel deployments
        OUTPUTS_FILE="outputs-${{ inputs.execution-id }}.json"
        
        # Execute deployment
        if timeout ${{ inputs.timeout-seconds }} npx cdk deploy ${{ inputs.stack-name }} \
          --require-approval never \
          --app cdk.out \
          --outputs-file $OUTPUTS_FILE; then
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully"
        else
          EXIT_CODE=$?
          echo "status=failure" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 124 ]; then
            FAILURE_REASON="Deployment timed out after ${{ inputs.timeout-seconds }} seconds"
          else
            FAILURE_REASON="Deployment failed with exit code $EXIT_CODE"
          fi
          
          echo "failure-reason=$FAILURE_REASON" >> $GITHUB_OUTPUT
          echo "::error::$FAILURE_REASON"
          exit $EXIT_CODE
        fi

    - name: Process Stack Outputs
      id: process-outputs
      if: steps.deploy.outputs.status == 'success'
      shell: bash
      run: |
        OUTPUTS_FILE="outputs-${{ inputs.execution-id }}.json"
        
        if [ -f "$OUTPUTS_FILE" ]; then
          # Extract outputs for this specific stack
          STACK_OUTPUTS=$(jq -c ".[\"${{ inputs.stack-name }}\"] // {}" $OUTPUTS_FILE)
          echo "stack-outputs=$STACK_OUTPUTS" >> $GITHUB_OUTPUT
          
          # Also save outputs to a more permanent location
          mkdir -p ../cdk-outputs
          cp $OUTPUTS_FILE ../cdk-outputs/
        else
          echo "stack-outputs={}" >> $GITHUB_OUTPUT
        fi

    - name: Deployment Summary
      if: always()
      shell: bash
      run: |
        echo "### Deployment Summary for ${{ inputs.stack-name }} 🚀" >> $GITHUB_STEP_SUMMARY
        echo "**Region**: \`${{ inputs.aws-region }}\`" >> $GITHUB_STEP_SUMMARY

        # Status with emoji
        if [ "${{ steps.deploy.outputs.status }}" == "success" ]; then
          echo "**Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Reason**: ${{ steps.deploy.outputs.failure-reason }}" >> $GITHUB_STEP_SUMMARY
        fi

        # Add deployment outputs if available
        if [ "${{ steps.process-outputs.outputs.stack-outputs }}" != "{}" ]; then
          echo "### Outputs 📋" >> $GITHUB_STEP_SUMMARY
          echo "| Output Key | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse JSON and convert to table format
          echo '${{ steps.process-outputs.outputs.stack-outputs }}' | jq -r 'to_entries | .[] | "| \(.key) | `\(.value)` |"' >> $GITHUB_STEP_SUMMARY
        fi
